#!/bin/sh

. $(dirname $0)/panel.cfg

if [ $(pgrep -cx panel) -gt 1 ] ; then
	printf "%s\n" "The panel is already running." >&2
	exit 1
fi

trap 'trap - TERM; kill 0' INT TERM QUIT EXIT

[ -e "$PANEL_FIFO" ] && rm "$PANEL_FIFO"
mkfifo "$PANEL_FIFO"

bspc config top_padding $PANEL_HEIGHT
bspc control --subscribe > "$PANEL_FIFO" &

# Fix issue with stereo audio devices
# usage: get_vol $DEVNAME
get_vol() {
  dev=$1
  if ! amixer get $dev | egrep Left &>/dev/null; then
    x=$(amixer get $dev | egrep -o "[0-9]+%")
  else
    l=$(amixer get $dev | grep Left | egrep -o "[0-9]+%" | sed s/\%//)
    r=$(amixer get $dev | grep Right | egrep -o "[0-9]+%" | sed s/\%//)
    x=$(($(($l + $r)) / 2))
  fi

  muted=$(amixer get $dev | egrep -o "\[off\]" | head -n1)
  if [ "$muted" != "" ]; then
    icon=$(echo -e "\u00c3")
  else
    icon=$(echo -e "\u00c5")
  fi

  icon="%{F#FF$WHITE}${icon}"
  x="%{F#FF$BOLD_WHITE}${x}"
  printf "%s %s\n" ${icon} ${x}\%%
}

get_bat () {
  if [ -d /sys/class/power_supply/BAT* ]; then
    percent=$(acpi | egrep -o [0-9]+%)
    percent=${percent:0:$(expr length $percent - 1)}
    state=$(acpi | egrep -o "(Full|Discharging|Charging|Unknown)")
  else
    return
  fi

  if [ $state == "Full" ]; then
      icon=$(echo -e "\u00c2")
  elif [ $state == "Discharging" -o $state == "Unknown" ]; then
    if [ $percent -gt 75 ]; then
      icon=$(echo -e "\u00f0")
    elif [ $percent -gt 30 ]; then
      icon=$(echo -e "\u00ef")
    else
      icon=$(echo -e "\u00ee")
    fi
  elif [ $state == "Charging" ]; then
    icon=$(echo -e "\u00b5")
  fi

  percent="%{F#FF$BOLD_WHITE}${percent}"
  icon="%{F#FF$WHITE}${icon}"
  printf "%s %s\n" ${icon} ${percent}\%% 
}

get_song() {
  song=$(cmus-remote -Q 2> /dev/null | awk '$2 == "artist"{a=substr($0,12)} $2 == "title"{t=substr($0,11); exit} END{printf("%s - %s\n",a,t); exit(!t)}')
  state=$(cmus-remote -Q 2> /dev/null | egrep -o "status (playing|paused|stopped)" | awk '{print $2}')

  if [ "$state" == "" ]; then
    return
  elif [ "$state" == "stopped" ]; then
    return
  elif [ "$state" == "paused" ]; then
    icon=$(echo -e "\u00e7")
  elif [ "$state" == "playing" ]; then
    icon=$(echo -e "\u00e6")
  fi

  icon="%{F#FF$WHITE}${icon}"
  song="%{F#FF$BOLD_WHITE}${song}"
  printf "%s %s\n" ${icon} "${song}"
}

get_date() {
  date=$(date +"%a %b %d %I:%M %p")
  date="%{F$DATE_TIME_FG}${date}"

  printf "%s\n" "$date"
}

get_wifi() {
  dev="$1"
  essid=$(iwgetid $dev | grep ESSID | awk -F: '{print $2}' | awk -F\" '{print $2}')

  if [ "$essid" == "" ]; then
    return
  fi
  
  signal=$(iw dev $dev link | grep signal | egrep -o '[0-9]+')

  if [ $signal -lt 68 ]; then
    color=$2
  elif [ $signal -lt 70 ]; then
    color=$3
  else
    color=$4
  fi

  icon="%{F$color}$(echo -e "\u00ad")"
  essid="%{F#FF$BOLD_WHITE}${essid}"

  printf "%s %s\n" ${icon} ${essid}
}

# Usage: get_ip_addr $ETH_DEV $WIFI_DEV
get_ip_addr() {
  eth_dev="$1"
  wifi_dev="$2"

  eth_ip=$(ip -f inet addr show $eth_dev | grep -Po 'inet \K[\d.]+' | head -n1)
  wifi_ip=$(ip -f inet addr show $wifi_dev | grep -Po 'inet \K[\d.]+' | head -n1)

  output=""

  if [ "$eth_ip" != "" ]; then
    eth_icon="%{F#FF$WHITE}E:"
    eth_ip="%{F#FF$BOLD_WHITE}${eth_ip}"
    output="${output}${eth_icon} ${eth_ip} "
  fi
  if [ "$wifi_ip" != "" ]; then
    wifi_icon="%{F#FF$WHITE}W:"
    wifi_ip="%{F#FF$BOLD_WHITE}${wifi_ip}"
    output="${output}${wifi_icon} ${wifi_ip}"
  fi

  printf "%s\n" "${output}"
}

# Loop to check time, battery and volume statuses
while true; do
	VOL=$(get_vol Master)
	BAT=$(get_bat $BATTERY_UNUSED $BATTERY_USED)
	DATE=$(get_date)
    WIFI=$(get_wifi $WIFI_DEV $WIFI_GOOD $WIFI_FAIR $WIFI_POOR)
    IP=$(get_ip_addr $ETH_DEV $WIFI_DEV)
    MUSIC=$(get_song)

    echo "H%{F#FF${CYAN}}$(echo -e "\u00b9")  %{F#FF${RED}}$(hostname)" > "$PANEL_FIFO" &
	echo "S ${MUSIC} ${IP} ${WIFI} ${VOL} ${BAT} ${DATE}" | tr -s '[:space:]' > "$PANEL_FIFO" &
    sleep 0.5s
done &

cat "$PANEL_FIFO" | ~/.config/bspwm/panel_bar | bar-aint-recursive -g ${BARWIDTH}x${BARHEIGHT}+${EDGEWIDTH} -f "$PANEL_FONT_FAMILY" -F "$FOREGROUND" -B "$BACKGROUND" -u "$UNDERLINE_WIDTH" &

wait
